:root {
    --height: 2.75rem; // 44px
    --height-small: 2.25rem; // 36px
    --radius: 0.5rem; // 8px
    --border-width: 0.125rem;
    --button-text-color: #1A202C;
    --font-color: var(--text-icon-base);
    --font-size: 0.875rem;
    --critical-default: #991B1B;
    --critical-hover: #7F1D1D;
    --critical-pressed: #450A0A;
    --primary-hover: #175FB6;
    --primary-pressed: #19518F;
    --surface-border: #E4E4E7;
    --surface-base: #FEFFFF;
    --surface-lower: #F7F7F7;
    --surface-deep: #E4E4E7;
    --text-icon-muted: #737584;

}

// ================================================================================
// Concrete classes for each kind of button
// Uses mixins for button-specific styling to correctly apply pseudo-elements
// and element states.
.button-primary-filled-label:extend(.abstract-button-default) {
    .mixin-primary-filled();
}

.button-primary-outline-label:extend(.abstract-button-default) {
    .mixin-primary-outline();
}

.button-primary-small-filled-label:extend(.abstract-button-small) {
    .mixin-primary-filled();
}

.button-primary-small-outline-label:extend(.abstract-button-small) {
    .mixin-primary-outline();
}

.button-brand-filled-label-icon:extend(.abstract-button-brand-default) {
    .mixin-brand-filled-icon();
}

.button-brand-outline-label:extend(.abstract-button-brand-default) {
    .mixin-brand-outline();
}

.button-brand-small-outline-label:extend(.abstract-button-brand-small) {
    .mixin-brand-outline();
}

.button-destructive-filled-label:extend(.abstract-button-default) {
    .mixin-destructive-filled();
}

.button-destructive-small-filled-label:extend(.abstract-button-small) {
    .mixin-destructive-filled();
}

.button-destructive-outline-label:extend(.abstract-button-default) {
    .mixin-destructive-outline();
}

.button-destructive-small-outline-label:extend(.abstract-button-small) {
    .mixin-destructive-outline();
}


// ================================================================================
// "Parent classes" for concrete buttons.
// - Use :extend to base a new class off a parent class.
// - Do not use directly with class="" in markup.

.abstract-button-default {
  align-items: center;
  border-radius: var(--border-radius);
  border: 0;
  cursor: pointer;
  display: flex;
  font-family: 'Inter', 'sans-serif';
  font-size: var(--txt-input); /* 14px */
  font-weight: 400;
  gap: 0.5rem;
  justify-content: center;
  line-height: 1;
  padding: 1rem 1.12rem;
  user-select: none;

  .icon {
    align-items: center;
    display: flex;
    height: 0.75rem;
    justify-content: center;
    width: 0.75rem;

    svg {
      height: 100%;
      width: 100%;
    }
  }

  &:active {
    outline: none !important;
  }


  &:disabled {
      background: var(--colour-neutral-base);
      border: 0.0625rem solid var(--colour-neutral-border);
      color: var(--colour-ti-muted);
      cursor: not-allowed;
  }


  @media (prefers-reduced-motion: no-preference) {
      transition: background-color 250ms ease-in-out,
                  background 250ms ease-in-out,
                  border 250ms ease-in-out,
                  color 250ms ease-in-out,
                  box-shadow 250ms ease-in-out;
  }
}

.abstract-button-small:extend(.abstract-button-default) {
    font-size: 0.875rem;
    height: 2rem;
    min-width: initial;
    padding: 0.375rem 0.75rem;
}

.abstract-button-brand-default:extend(.abstract-button-default) {
    .mixin-font-styles(
        @family-inter,
        600,
        0.8125rem,
        normal,
        0.33px
    );

    color: var(--colour-ti-base);
    padding: 1rem 1.5rem;
    text-shadow: 0.5px 0.5px 0 rgba(255, 255, 255, 0.10);
    text-transform: uppercase;
}

.abstract-button-brand-small:extend(.abstract-button-brand-default, .abstract-button-small) {
    font-size: 0.6875rem;
    padding: 0.375rem 0.75rem;
}


// ================================================================================
// Button variant mixins
//
.mixin-primary-filled() {
    background: linear-gradient(180deg, var(--colour-accent-blue) -31.82%, var(--colour-primary-default) 8.74%, var(--colour-primary-hover) 100%) border-box;
    color: var(--colour-neutral-base);

    &:hover:enabled {
      background: linear-gradient(180deg, var(--colour-primary-hover) 0%, var(--colour-primary-hover) 100%);
    }

    &:active:enabled {
      background: linear-gradient(180deg, var(--colour-primary-pressed) 0%, var(--colour-primary-pressed) 100%);
    }

    &:disabled {
      background: var(--colour-neutral-border);
      color: var(--colour-ti-muted);
      cursor: not-allowed;
    }

    &:focus-visible {
        outline: 0.125rem solid var(--colour-primary-default);
        outline-offset: 0.125rem;
    }
}

.mixin-primary-outline() {
    @color-start: var(--colour-primary-default-dark);
    @color-mid: var(--colour-primary-default);
    @color-end: var(--colour-primary-hover);;

    .outline(linear-gradient(180deg, @color-start -31.82%, @color-mid 8.74%, @color-end 100%));

    color: var(--colour-primary-hover);

    &:hover:enabled {
        // Using named param for 3rd arg, since we're skipping the second one.
        .outline(var(--colour-primary-hover), @border-width: 0.125rem);
    }

    &:active:enabled {
        @bg: color-mix(in srgb, var(--colour-accent-blue), transparent 90%);
        .outline(var(--colour-primary-pressed), @bg, 0.125rem);
    }

    &:focus-visible {
        outline: 0.125rem solid var(--colour-primary-default);
        outline-offset: 0.125rem;
    }

    &:disabled {
        .outline(var(--colour-neutral-border));
        color: #737584;
        cursor: not-allowed;
    }
}

.mixin-brand-filled-icon() {

    @border-color: linear-gradient(116.63deg, #A0E1FF -13.89%, #2B8CDC 37.7%);
    @background-color: linear-gradient(329deg, #1373D9 -21.06%, #58C9FF 64%);
    .outline(@border-color, @background-color, @border-width: 1px);

    &:hover:enabled {
      background: linear-gradient(var(--colour-primary-hover), var(--colour-primary-hover));
      color: var(--colour-neutral-base);
    }

    &:active:enabled {
      background: linear-gradient(var(--colour-primary-pressed), var(--colour-primary-pressed));
      color: var(--colour-neutral-base);
    }

    &:focus-visible {
        background: linear-gradient(var(--colour-primary-hover), var(--colour-primary-hover));
        color: var(--colour-neutral-base);
        outline: 0.125rem solid var(--colour-primary-default);
        outline-offset: 0.125rem;
    }

    &:disabled {
        @background-color: var(--colour-neutral-border);
        @noop-color: #fff;
        .outline(@noop-color, @background-color, @border-width: 0);

        color: var(--colour-ti-muted);
        cursor: not-allowed;
    }

}

.mixin-brand-outline() {

    @border-color: linear-gradient(98.98deg, #58C9FF 19.15%, #6E6F9B 75.77%);
    .outline(@border-color);
    color: #1A202C;
    text-shadow: 0.5px 0.5px 0 rgba(255, 255, 255, 0.10);

    &:hover {
        .outline(@border-color, #f2f2f2);
        color: var(--colour-ti-base-light);
    }

    &:active {
        .outline(@border-color, #e3e3e3);
        color: var(--colour-ti-base-light);
    }

    &:focus-visible {
        @outer-border: var(--colour-primary-default);
        @inner-border: linear-gradient(98.98deg, #58C9FF 19.15%, #6E6F9B 75.77%);

        .spaced-double-outline(@outer-border, @inner-border,
            2px,     // outer border width
            2px,     // inner border width
            1px      // gap between borders
        );
        color: var(--colour-ti-base);
    }

    &:disabled {
        .outline(var(--colour-neutral-border));
        color: #737584;
        cursor: not-allowed;
    }

}

.mixin-destructive-filled() {
    .filled(var(--colour-danger-default));

    &:hover {
        .filled(var(--colour-danger-hover));
    }

    &:active {
        .filled(var(--colour-danger-pressed));
    }

    &:focus-visible {
        outline: 0.125rem solid var(--colour-danger-hover);
        outline-offset: 0.125rem;
    }

    &:disabled {
        .filled(var(--colour-neutral-border));
        color: var(--colour-ti-muted);
        cursor: not-allowed;
        text-shadow: 0.5px 0.5px 0 rgba(255, 255, 255, 0.10);
    }
}

.mixin-destructive-outline() {
    .outline(var(--colour-danger-default));
    color: var(--colour-danger-default);

    &:hover {
        .outline(var(--colour-danger-hover));
        color: var(--colour-danger-hover);
    }

    &:active {
        .outline(var(--colour-danger-pressed));
        color: var(--colour-danger-hover);
    }

    &:focus-visible {
        outline: 0.125rem solid var(--colour-danger-hover);
        outline-offset: 0.125rem;
    }

    &:disabled {
        .outline(var(--surface-border));
        color: var(--text-icon-muted);
        cursor: not-allowed;
        text-shadow: 0.5px 0.5px 0 rgba(255, 255, 255, 0.10);
    }
}


// ================================================================================
// Mixin classes for filled and outline buttons.
//
.filled(@background-color, @font-color: var(--font-color)) {
    background: @background-color;
    color: @font-color;
}

.outline(@border-color, @background-color: transparent, @border-width: var(--border-width)) {
    position: relative;

    border: 0;
    background: @background-color;


    // Gradient ring only
    &::before {
        content: "";
        position: absolute;
        inset: 0;
        border-radius: inherit;

        /* the gradient or color that will become the border ring */
        background: @border-color;

        /* ring thickness is controlled by padding on the pseudo-element */
        box-sizing: border-box;
        padding: @border-width;

        /* punch out the center on the pseudo-element only */
        -webkit-mask:
            linear-gradient(#000 0 0) content-box,
            linear-gradient(#000 0 0);
        -webkit-mask-composite: xor;     /* Chrome/Safari/Edge */
        mask-composite: exclude; /* Firefox */

        pointer-events: none; /* clicks go to the button */
    }
}

.double-outline(@outer-border-color, @inner-border-color, @background-color: transparent, @outer-width: 2px, @inner-width: 2px) {
    outline: none;

    position: relative;
    border: 0;
    background: @background-color;
    color: inherit;

    // Outer border ring
    &::before {
        content: "";
        position: absolute;
        inset: 0;
        border-radius: 0.625rem;
        background: @outer-border-color;
        box-sizing: border-box;
        padding: @outer-width;

        -webkit-mask:
            linear-gradient(#000 0 0) content-box,
            linear-gradient(#000 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;

        pointer-events: none;
        z-index: 1;
    }

    // Inner border ring
    &::after {
        content: "";
        position: absolute;
        inset: @outer-width; /* Start where outer border ends */
        border-radius: inherit;
        background: @inner-border-color;
        box-sizing: border-box;
        padding: @inner-width;

        -webkit-mask:
            linear-gradient(#000 0 0) content-box,
            linear-gradient(#000 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;

        pointer-events: none;
        z-index: 2;
    }
}

.spaced-double-outline(@outer-border-color, @inner-border-color, @background-color: transparent, @outer-width: 2px, @inner-width: 2px, @gap: 2px) {
    outline: none;

    position: relative;
    border: 0;
    background: @background-color;
    color: inherit;

    // Outer border ring
    &::before {
        content: "";
        position: absolute;
        inset: 0;
        // border-radius: inherit;
        border-radius: 0.625rem;
        background: @outer-border-color;
        box-sizing: border-box;
        padding: @outer-width;

        -webkit-mask:
            linear-gradient(#000 0 0) content-box,
            linear-gradient(#000 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;

        pointer-events: none;
        z-index: 1;
    }

    // Inner border ring (with gap)
    &::after {
        content: "";
        position: absolute;
        inset: (@outer-width + @gap); /* Gap = outer border + space + inner border position */
        // border-radius: inherit;
        border-radius: 0.5rem;

        background: @inner-border-color;
        box-sizing: border-box;
        padding: @inner-width;

        -webkit-mask:
            linear-gradient(#000 0 0) content-box,
            linear-gradient(#000 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;

        pointer-events: none;
        z-index: 2;
    }
}
